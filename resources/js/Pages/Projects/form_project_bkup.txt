<script setup lang="ts">
import {
  Dialog,
  DialogPanel,
  DialogTitle,
  TransitionChild,
  TransitionRoot,
} from '@headlessui/vue'
import { router, useForm } from '@inertiajs/vue3'
import axios from 'axios'
import { computed, onMounted, reactive, ref } from 'vue'

import { DatePicker } from 'v-calendar'
import { UseDark } from '@vueuse/components'
import InputError from '@/Components/InputError.vue'
import type { Company, ContactApiResponse, ProjectApiResponse } from '@/types'
import AutosizeTextarea from '@/Components/AutosizeTextarea.vue'
import BaseList from '@/Components/BaseList.vue'
import TextInput from '@/Components/TextInput.vue'

const props = defineProps<{
  action: number | null
  open: boolean
  width: string
  companies: Company[]
  project: ProjectApiResponse
}>()

const contacts = reactive<ContactApiResponse[]>([])
const filtered_contacts = reactive<{ value?: number; label: string }[]>([])
const filtered_companies = reactive<{ value?: number; label: string }[]>([])

const masks = ref({
  modelValue: 'YYYY-MM-DD',
})

const today = new Date()
const end_date = new Date(today)
end_date.setDate(today.getDate() + 2)

const form = useForm({
  name: props.project.name,
  description: props.project.description,
  start_date: props.project.start_date ? new Date(props.project.start_date) : new Date(),
  end_date: props.project.end_date ? new Date(props.project.end_date) : end_date,
  status: props.project.status,
  company_id: props.project.id ? props.project.company_id : '',
  contact_id: props.project.id ? props.project.contact_id : '',
})

const computed_width = computed(() => props.width)

const actionPath = computed(() => props.action ? `'projects.index', ${props.action}` : 'projects.index')

// watch(() => props.action, path => console.log(path))

function handleClose() {
  // if (props.action === 'edit') {
  //   router.get(curee)
  // }

  router.get(route('projects.index'), {
    preserveState: true,
  })
}

onMounted(() => {
  props.companies.forEach((company) => {
    filtered_companies.push({
      value: company.id,
      label: company.name,
    })
  })
})

function submit() {
  if (props.action) {
    form.patch(`/projects/${props.project.id}`, {

      preserveScroll: true,

      onSuccess: () => {
        form.reset()
        handleClose()
      },
    })
  }
  else {
    form.post('/projects', {

      preserveScroll: true,

      onSuccess: () => {
        form.reset()
        handleClose()
      },
    })
  }
}

async function fetchContacts() {
  form.reset('contact_id')
  Object.assign(contacts, null)

  filtered_contacts.splice(0)

  await axios.get(`/companies/${form.company_id}/contacts`).then((response) => {
    Object.assign(contacts, response.data.contacts)

    response.data.contacts.forEach((contact: ContactApiResponse) => {
      filtered_contacts.push({
        value: contact.id,
        label: `${contact.first_name} ${contact.last_name}`,
      })
    })
  })
}

const disabledDates = ref([
  {
    repeat: {
      weekdays: [1, 7],
    },
  },
])
</script>

<template>
  <div v-if="open" class="fixed inset-0 z-30 flex items-center justify-center backdrop-blur-xs bg-gray-400/70" />

  <TransitionRoot appear :show="open" as="template">
    <Dialog as="div" class="relative z-40">
      <TransitionChild
        as="template"
        enter="duration-300 ease-out"
        enter-from="opacity-0"
        enter-to="opacity-100"
        leave="duration-200 ease-in"
        leave-from="opacity-100"
        leave-to="opacity-0"
      >
        <div class="fixed inset-0 bg-black bg-opacity-25" />
      </TransitionChild>

      <div class="fixed inset-0 overflow-y-auto">
        <div
          class="flex items-center justify-center min-h-full p-4 text-center"
        >
          <TransitionChild
            as="template"
            enter="duration-300 ease-out"
            enter-from="opacity-0 scale-95"
            enter-to="opacity-100 scale-100"
            leave="duration-200 ease-in"
            leave-from="opacity-100 scale-100"
            leave-to="opacity-0 scale-95"
          >
            <DialogPanel
              class="relative p-4 overflow-hidden text-left align-middle transition-all transform bg-white rounded-lg shadow dark:bg-gray-800 sm:p-5"
              :class="computed_width"
            >
              <DialogTitle as="template">
                <div class="flex items-center justify-between pb-4 mb-4 border-b rounded-t sm:mb-5 dark:border-gray-600">
                  <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
                    {{ project.id ? 'Edit' : 'Add' }} project
                  </h3>

                  <button
                    type="button"
                    class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white"
                    @click="handleClose"
                  >
                    <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" /></svg>
                    <span class="sr-only">Close modal</span>
                  </button>
                </div>
              </DialogTitle>

              <form
                @submit.prevent="submit"
              >
                <div class="grid gap-4 mb-4 sm:grid-cols-2">
                  <div class="col-span-2">
                    <label
                      for="name"
                      class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                    >
                      Project name
                    </label>

                    <input
                      id="name"
                      v-model="form.name"
                      type="text"
                      class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-lime-600 focus:border-lime-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-lime-500 dark:focus:border-lime-500"
                      placeholder="Type project's name"
                    >

                    <InputError :message="form.errors.name" />
                  </div>

                  <div class="col-span-2">
                    <label
                      for="description"
                      class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                    >
                      Description
                    </label>

                    <AutosizeTextarea id="description" v-model="form.description" placeholder="Type project's name" />

                    <InputError :message="form.errors.description" />
                  </div>

                  <div>
                    <label for="company" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Company</label>
                    <BaseList v-model="form.company_id" :error="form.errors.company_id" placeholder="Select project's company" :options="filtered_companies" @update:modelValue="fetchContacts" />
                  </div>

                  <div>
                    <label for="contact_id" class="block w-[16.5rem] mb-2 text-sm font-medium text-gray-900 dark:text-white">Contact person</label>
                    <BaseList v-model="form.contact_id" :error="form.errors.contact_id" placeholder="Select a contact for the project" :options="filtered_contacts" />
                  </div>

                  <div>
                    <label
                      for="start_date"
                      class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                    >
                      Start date
                    </label>

                    <!-- <input
                      id="start_date"
                      v-model="form.start_date"
                      type="date"
                      class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-lime-600 focus:border-lime-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-lime-500 dark:focus:border-lime-500"
                      placeholder="Pick project's starting date"
                    > -->

                    <UseDark v-slot="{ isDark }">
                      <DatePicker
                        v-model="form.start_date"
                        :is-dark="isDark"
                        view="weekly"
                        title-position="left"
                        :disabled-dates="disabledDates"
                      >
                        <template #default="{ inputValue, inputEvents }">
                          <TextInput :model-value="inputValue" v-on="inputEvents" />
                        </template>
                      </DatePicker>
                    </UseDark>

                    <!-- <UseDark v-slot="{ isDark }">
                      <DatePicker
                        v-model="form.start_date"
                        :is-dark="isDark"
                        view="weekly"
                      />
                    </UseDark> -->

                    <InputError :message="form.errors.start_date" />
                  </div>

                  <div>
                    <label
                      for="start_date"
                      class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
                    >
                      Due date
                    </label>

                    <!-- <input
                      id="end_date"
                      v-model="form.end_date"
                      type="date"
                      class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-lime-600 focus:border-lime-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-lime-500 dark:focus:border-lime-500"
                      placeholder="Pick project's finishing date"
                    > -->

                    <UseDark v-slot="{ isDark }">
                      <DatePicker
                        v-model="form.end_date"
                        :is-dark="isDark"
                        view="weekly"
                        title-position="right"
                        :disabled-dates="disabledDates"
                      >
                        <template #default="{ inputValue, inputEvents }">
                          <TextInput :model-value="inputValue" v-on="inputEvents" />
                        </template>
                      </DatePicker>
                    </UseDark>

                    <InputError :message="form.errors.end_date" />
                  </div>

                  <!-- <div>
                    <label for="company" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Company</label>
                    <select id="company" v-model="form.company_id" :readonly="project.id ? true : false" required class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-lime-500 focus:border-lime-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-lime-500 dark:focus:border-lime-500" @change="fetchContacts">
                      <option value="" disabled>
                        Select project's current company
                      </option>

                      <option v-for="company in companies" :key="company.id" :value="company.id">
                        {{ company.name }}
                      </option>
                    </select>

                    <InputError :message="form.errors.company_id" />
                  </div> -->

                  <!-- <div>
                    <label for="contact_id" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Contact person</label>
                    <select id="contact_id" v-model="form.contact_id" :readonly="project.id ? true : false" required class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-lime-500 focus:border-lime-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-lime-500 dark:focus:border-lime-500">
                      <option value="" disabled>
                        Select project's contact person
                      </option>

                      <option v-for="contact in contacts" :key="contact.id" :value="contact.id">
                        {{ `${contact.first_name} ${contact.last_name}` }}
                      </option>
                    </select>

                    <InputError :message="form.errors.contact_id" />
                  </div> -->

                  <div class="flex items-center justify-end col-span-2 gap-4 pt-4">
                    <button
                      type="submit"
                      :disabled="form.processing"
                      class="text-white inline-flex items-center bg-gray-700 hover:bg-gray-800 focus:ring-4 focus:outline-none focus:ring-gray-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-gray-600 dark:hover:bg-gray-700 dark:focus:ring-gray-800"
                    >
                      <svg class="w-6 h-6 mr-1 -ml-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
                      </svg>

                      {{ project.id ? 'Update ' : 'Create ' }} project
                    </button>
                  </div>
                </div>
              </form>
            </DialogPanel>
          </TransitionChild>
        </div>
      </div>
    </Dialog>
  </TransitionRoot>
</template>
